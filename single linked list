#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
void InsertAtBegining(int value);
void InsertAtEnd(int value);
void InsertAtPosition(int value,int position);
void RemoveAtBegining();
void RemoveAtEnd();
void RemoveAtPosition(int position);
void display();
int CheckEmpty();
struct Node{
int data;
struct Node *next;	
}*head=NULL;
int main(){
	int value,choice;
	char c;
	do{
		printf("Enter \n1-Insert\n2-Remove\n3-Display\n");
		scanf("%d",&choice);
		switch(choice)
		{
			case 1:
			{
				int x;
				printf("Enter \n1-Insert at begining\n2-Insert at end\n3-Insert at position \n");
				scanf("%d",&x);
				printf("Enter the value to be inserted\n");
				scanf("%d",&value);
				switch(x)
				{
					case 1:		
					{
						InsertAtBegining(value);
						break;
					}
					case 2:		
					{
						InsertAtEnd(value);
						break;
					}
					case 3:		
					{	
						int position;
						printf("Enter the position to insert a value(counted from 0)\n");
						scanf("%d",&position);
						InsertAtPosition(value,position);
						break;
					}
					default :
					{
						printf("Enter a valid choice");
						break;
					}
				}
				break;
			}
			case 2:
			{
				int x;
				printf("Enter \n1-Delete at begining\n2-Delete at end\n3-Delete at position \n");
				scanf("%d",&x);
				switch(x)
				{
					case 1:		
					{
						RemoveAtBegining();
						break;
					}
					case 2:		
					{
						RemoveAtEnd();
						break;
					}
					case 3:		
					{	
						int position;
						printf("Enter the position to insert a value(counted from 0)\n");
						scanf("%d",&position);
						RemoveAtPosition(position);
						break;
					}
					default :
					{
						printf("Enter a valid choice");
						break;
					}
				}
				break;
			}
			case 3:
			{
				display();
				break;
			}
			default:
			{
				printf("Enter a valid choice");
				break;
			}
		}
		printf("Enter Y to continue else any letter\n");
		fflush(stdin);
		c=getche();
		printf("\n");
	}
	while(c=='Y' || c=='y');
	return 0;
}
void InsertAtBegining(int value){
	struct Node *newNumber;
	newNumber=(struct Node*)malloc(sizeof(struct Node));
	newNumber->data=value;
	if(head==NULL)
	{
		newNumber->next=NULL;
		head=newNumber;
	}
	else
	{
		newNumber->next=head;
		head=newNumber;
	}
	printf("The given number %d is inserted at the Begining sucessfully\n",value);
}
void InsertAtEnd(int value){
	struct Node *newNumber;
	newNumber=(struct Node*)malloc(sizeof(struct Node));
	newNumber->data=value;
	newNumber->next=NULL;
	if(head==NULL)
	{
		head=newNumber;
	}
	else
	{
		struct Node *temp;
		temp=head;
		while(temp->next!=NULL)
		{
			temp=temp->next;
		}
		temp->next=newNumber;
	}
	printf("The given number %d is inserted at the End sucessfully\n",value);
}
void InsertAtPosition(int value,int position){
	struct Node *newNumber,*temp;
	int count,flag;
	newNumber=(struct Node*)malloc(sizeof(struct Node));
	newNumber->data=value;
	temp=head;
	flag=CheckEmpty();
	if(flag==1)
	{
		int flag1=0;
		count=0;
		while(temp!=NULL)
		{
			if(count==position-1)
			{
				flag1=1;
				newNumber->next=temp->next;
				temp->next=newNumber;
			}		
			else
			{
				temp=temp->next;
			}
			count++;
		}
		if(flag1==0)
		{
			printf("Entered position not available\n");
		}
		else
		{
			printf("Given number %d is inserted at the position %d sucessfully\n",value,position);
		}
	}
	else
	{
		printf("List is Empty\n");
	}
}
void RemoveAtBegining(){
	int flag=CheckEmpty();
	if(flag==1)
	{
		struct Node *temp;
		temp=head;
		if(temp->next==NULL)
		{
		head=NULL;
		free(temp);
		}
		else
		{
			head=temp->next;
			free(temp);
		}
		printf("Deleted Sucessfully\n");
	}
	else
	{
		printf("List is empty\n");
	}
}
void RemoveAtEnd(){
	int flag=CheckEmpty();
	if(flag==1)
	{
		struct Node *temp;
		temp=head;
		if(temp->next==NULL)
		{
		head=NULL;
		}
		else
		{
			struct Node *temp=head,*temp1;
			while(temp->next!=NULL)
			{
				temp1=temp;
				temp=temp->next;
			}
			temp1->next=NULL;
			free(temp);
		}
	}
	else
	{
		printf("LIst is empty.Try again! \n");
	}
}
void RemoveAtPosition(int position){
	int flag=CheckEmpty();
	if(flag==1)
	{
		int count=0,flag1=0,i;
		struct Node *temp=head;
		if(position==1)
		{
			head=temp->next;
			free(temp);
			return;
		}
		for(i=0;i<position-2;i++)
		{
			temp=temp->next;
		}
		struct Node *temp1=temp->next;
		temp->next=temp->next;
		free(temp1);
	}	
	else
	{
		printf("LIst is empty\n");
	}
}
void display(){
	int flag=CheckEmpty();
	if (flag==1)
	{
		struct Node *temp;
		temp=head;
		while(temp->next!=NULL)
		{
			printf("%d->",temp->data);
			temp=temp->next;
		}
		printf("%d->",temp->data);
		printf("\n");
	}
	else
	{
		printf("No List Available");
	}
}
int CheckEmpty(){
	if(head==NULL)
	{
		return 0;
	}
	else
	{
		return 1;
	}
}
